* * * * * * * * * * * * * * * * * * * * * * * TEST DRIVEN DEVELOPMENT * * * * * * * * * * * * * * * * * * * * * * * * *
*
* Каждый класс теста называется - Test Case
*
* В реальной жизни (чаще всего) вначале пишется пустой метод, после пишутся все примитивные проверки на этот метод.
* * * Вначале, так как метод пустой, все эти тесты будут проваливаться. Но это делается с целью постепенно заполнять
* * * метод кодом и поочередно исправлять тесты.
*
* В тестах есть специальное исключение, какое используется
* * * когда мы должны вызвать искуственную ошибку в тесте и
* * * дать знать что тест работает не по правилам.
* * * Исключение - AssertionError();
*
* Проще работать с internal dsl под названием FEST Fluent Assertions, чем с JUnit. Это библиотека для тестирования кода,
* * * очень похожая на JUnit.
*
* JUnit для каждого вызова метода создает новый экземпляр test case. Из-за этого можно спокойно создавать поля
* * * в test case. Но естественно нежелательно создавать статические поля. Если метод провалиться, в переменной могут
* * * остаться нежелательные данные. Также, из-за создания экземпляра каждый раз, каждый раз и вызывается конструктор
* * * класса (если он объявлен). Он вызывается после аннотации @BeforeClass и он должен быть без параметров.
*
* Обозначение аннотаций в тестах:
* * * @BeforeClass - запуститься самым первым и только один раз.                (Должен быть public static)
* * * * * (Полезно инициализировать переменные, а объявлять их в полях класса)
* * * @Before - будет запускаться перед вызовом каждого тестового метода.       (Должен быть public)
* * * @Test - обозначение тестового метода.                                     (Должен быть public)
* * * @After - будет запускаться после каждого тестового метода.                (Должен быть public)
* * * @AfterClass - запуститься самым последним и только один раз.              (Должен быть public static)
*
* В TDD можно нарушать все правила наименования методов. Главное чтобы имя было говорящее что это за тест
* * * и что он делает.
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *