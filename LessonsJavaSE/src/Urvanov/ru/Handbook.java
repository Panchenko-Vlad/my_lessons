package Urvanov.ru;

/**
 * * * * * ЧТО Я УЗНАЛ НОВОГО * * * * *
 *
 * import static - можно прописать импорт для статической переменной
 *
 * continue - оператор, позволяет пропустить текущую итерацию и перейти сразу к следующей итерации цикла              *
 *
 * Сигнатура метода - это имя метода вместе со списком параметров
 *
 * Фактические параметры или аргументы - это то, что реально было передано в функцию, метод или процедуру             *
 *
 * public void sum (int... parameter) { } - метод, принимающий произвольное число параметров
 *
 * Ключевое слово this может также использоваться для вызова из конструктора класса другого конструктора этого класса.
 * * * Вызов другого конструктора должен быть обязательно первым оператором/инструкцией в конструкторе:
 * * *
 * * * public Goblin(double health, int ammo) {
 * * *     this(health, ammo, 0); // ... остальная инициализация.
 * * * }
 * * *
 * * * public Goblin(double health, int ammo, int gold) {
 * * *     this.health = health;
 * * *     this.ammo = ammo;
 * * *     this.gold = gold;
 * * * }
 *
 * При создании объектов каждый объект получает свой отдельный набор переменных экземпляров.                          *
 * * * Если же нужно сделать какую-то переменную общей для всех экземпляров, то используется ключевое слово static.
 * * * Рекомендуется всегда обращаться к статическим свойствам через имя класса, чтобы подчеркнуть,
 * * * что оно относится именно к классу.
 *
 * Ключевое слово final может применяться к методу, тогда этот метод нельзя переопределять в классах-потомках для
 * * * методов экземпляров и нельзя скрывать (hide) в классах потомках для случая статических методов.
 * * * Можно применить final ко всему классу, что означает, что у класса не может быть потомков, то есть будет нельзя
 * * * наследоваться от этого класса.
 *
 * Если выражение инициализации не помещается в одну строку, или требуется обработка ошибок, использование циклов     *
 * * * и прочее, то можно использовать блоки инициализации:
 * * * class Goblin {
 * * *     static int idCounter;
 * * *     int money;
 * * *
 * * *     static {
 * * *         // Инициализация статических полей
 * * *         idCounter = 3;
 * * *     }
 * * *
 * * *     {
 * * *         // Инициализации переменных экземпляров.
 * * *         money = 300;
 * * *     }
 * * * }
 * * * Блоки статической инициализации выполняются один раз при инициализации класса. Может быть несколько блоков
 * * * инициализации, и в таком случае они будут выполняться в порядке появления в исходном файле сверху вниз.
 *
 */

public class Handbook {
}
